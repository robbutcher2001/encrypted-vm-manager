#!/bin/bash

## Global consts ##
readonly activeUser=$USER
readonly vmAmiID='ami-0e19770d1a2173385'
readonly vmSize='t2.micro'
readonly vmKeyPair='aws-vm-key'
readonly vmSG='sg-02bab4ce68aad6be0'
readonly privateKeyLocation=$HOME'/'$vmKeyPair'.pem'

## Global vars ##
instanceId='not-assigned'

cd $(dirname ${BASH_SOURCE[0]})

## Functions ##
function welcome() {
  printf '\n************************************\n'
  printf "** Butcher\'s Encrypted VM Manager **\n"
  printf '*************** v0.1 ***************\n\n'
  printf '=> Running as user ['$activeUser']\n'
}

function init() {
  printf '=> Performing system checks..\n'

  if [[ ! -f $privateKeyLocation ]]; then
    printf '\nRead failed for default key ['$privateKeyLocation']. Where is your key? '
    read privateKeyLocation
    if [[ ! -f $privateKeyLocation ]]; then
      finishWithError 'Read failed again for custom key location ['$privateKeyLocation']. Please verify.'
    fi
  fi

  printf '\e[32m\n\xE2\x9C\x94 Using AWS private key located at ['$privateKeyLocation']\e[m\n'

  if type 'aws' &> /dev/null; then
    printf '\e[32m\xE2\x9C\x94 Verified AWS CLI is installed\e[m\n'
  else
    printf '\e[31m\xE2\x9D\x8C AWS CLI not found on system, please install.\e[m\n'
    finishWithError 'Unmet dependencies'
  fi

  printf '\n'
}

function check_for_running_instances() {
  printf '=> Contacting AWS for instance statuses..\n'

  local awsResp=$(aws ec2 describe-instances --filters 'Name=key-name,Values='$vmKeyPair)
  local runningCount=$(echo $awsResp | bin/jq -r '.Reservations | length')
  if (( $runningCount > 0 )); then
    local instanceState=$(echo $awsResp | bin/jq -r '.Reservations[0].Instances[0].State.Code')
    if (( $instanceState != 48 )); then
      instanceId=$(echo $awsResp | bin/jq -r '.Reservations[0].Instances[0].InstanceId')
      printf '\e[33m\nRunning instance for user ['$activeUser'] found, terminate or get password? [t|p]\e[m\n'
      read action
      if [[ $action == 't' || $action == 'T' ]]; then
        terminate_instance
      else
        if [[ $action == 'p' || $action == 'P' ]]; then
          obtain_admin_password
          check_for_running_instances
        else
          finishWithError "Unrecognised action ['$action'], can only be \'t\' or \'p\'"
        fi
      fi
    fi
  fi

  return 1;
}

function launch_instance() {
  printf '\nSpawning new instance for ['$activeUser']..'
  local awsResp=$(aws ec2 run-instances --image-id $vmAmiID --count 1 --instance-type $vmSize --key-name $vmKeyPair --security-group-ids $vmSG --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value='$activeUser'}]')
  instanceId=$(echo $awsResp | bin/jq -r '.Instances[0].InstanceId')

  if [[ $instanceId == *'i-'* ]]; then
    printf ' instance created with ID ['$instanceId']\n'
    getPublicDNS
    obtain_admin_password
    check_for_running_instances
  else
    finishWithError 'Instance could not be created, try again in a minute'
  fi
}

function getPublicDNS() {
  printf '=> Waiting for public DNS to be available..'
  pollGetDNS
}

function pollGetDNS() {
  printf '.'

  local awsResp=$(aws ec2 describe-instances --instance-ids $instanceId)
  local dns=$(echo $awsResp | bin/jq -r '.Reservations[0].Instances[0].PublicDnsName')

  if [[ $dns != '' ]]; then
    printf '\e[32m\n\nInstance now accessible with DNS ['$dns']\e[m\n'
    if [[ $OSTYPE == *'darwin'* ]]; then
      echo $dns | tr -d '\n' | pbcopy
      printf '\e[32mDNS has been copied to your clipboard.\e[m\n'
    fi
  else
    sleep 5
    pollGetDNS
  fi
}

#not used yet
function get_instance_status() {
  local awsResp=$(aws ec2 describe-instance-status --instance-ids i-0404daaa739bea4a2)
  local runningCount=$(echo $awsResp | bin/jq -r '.InstanceStatuses | length')

  if [[ $runningCount == *0* ]]; then
    printf '\e[32mNo running instances for ['$activeUser']\e[m\n'
  fi
}

function obtain_admin_password() {
  printf '\n=> Obtaining instance administrator password..'

  local awsResp=$(aws ec2 get-password-data --instance-id $instanceId --priv-launch-key $privateKeyLocation)
  local password=$(echo $awsResp | bin/jq -r '.PasswordData')
  printf ' obtained and decoded.\n\n'
  printf 'You can now log into your Windows VM using:\n   - Username: Administrator\n   - Password: '$password'\n\n'

  if [[ $password != '' && $OSTYPE == *'darwin'* ]]; then
    echo $password | tr -d '\n' | pbcopy
    printf '\e[32mPassword has been copied to your clipboard.\e[m\n'
  fi
}

function terminate_instance() {
  local awsResp=$(aws ec2 terminate-instances --instance-ids $instanceId)
  local statusCode=$(echo $awsResp | bin/jq -r '.TerminatingInstances[0].CurrentState.Code')

  if (( $statusCode == 32 )); then
    instanceId=$(echo $awsResp | bin/jq -r '.Reservations[0].Instances[0].InstanceId')
    printf '\e[32mInstance has been successfully terminated. Job done.\e[m\n'
    finish
  fi
}

function finishWithError() {
  printf '\n\e[31mManager Finished. Exiting abnormally.\n'
  printf "Error: $1.\e[m\n"
  exit 1
}

function finish() {
  printf '\n\e[32mManager Finished. Exiting normally..\e[m\n'
  exit 0
}

## Main ##
welcome
init
check_for_running_instances

if (( $? == 1 )); then
  printf '\e[34m\nDo you want to launch a new instance now? [y|n]\e[m\n'
  read action
  if [[ $action == 'y' || $action == 'Y' ]]; then
    launch_instance
  else
    if [[ $action == 'n' || $action == 'N' ]]; then
      finish
    fi
  fi
fi
# launch_instance
# get_instance_status
# obtain_admin_password

#...

finish
